import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.scss";

import { useEffect } from "react";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {

  

  useEffect(() => {
  //@ts-ignore
  const dropzones = [...document.querySelectorAll(".dropzone")];
  //@ts-ignore
  const draggables = [...document.querySelectorAll(".draggable")];

  function getDragAfterElement(container: any, y:any) {
    const draggableElements = [
      ...container.querySelectorAll(".draggable:not(.is-dragging)")
    ];

    return draggableElements.reduce(
      (closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = y - box.top - box.height / 2;

        if (offset < 0 && offset > closest.offset) {
          return {
            offset,
            element: child
          };
        } else {
          return closest;
        }
      },
      { offset: Number.NEGATIVE_INFINITY }
    ).element;
  }

  draggables.forEach((draggable) => {
    draggable.addEventListener("dragstart", (e: any) => {
      draggable.classList.add("is-dragging");
    });

    draggable.addEventListener("dragend", (e: any) => {
      const copiaElementoConDescendientes = draggable?.cloneNode(true);
      draggable.classList.remove("is-dragging");
      if(!copiaElementoConDescendientes.classList.contains("is-dragging")){
        copiaElementoConDescendientes.classList.add("already-dragged")
        agregarItem(copiaElementoConDescendientes, e)
      }
    });
  });

  dropzones.forEach((zone) => {
    zone.addEventListener("dragover", (e: any) => {
      e.preventDefault();
      const draggable = document.querySelector(".is-dragging");
      
      if (draggable?.classList.contains("already-dragged")) {
        console.log("algo")
        const afterElement = getDragAfterElement(zone, e.clientY);
  
        if (afterElement === null) {
          zone.appendChild(draggable);
        } else {
          zone.insertBefore(draggable, afterElement);
        }
      }else{
        console.log("nada")
      }
    });
  });

  const agregarItem = (item: any, e: any) => {
      let zone = dropzones[0]
      const afterElement = getDragAfterElement(zone, e.clientY);
      console.log(item);
      if (afterElement === null) {
        zone.appendChild(item);
      } else {
        zone.insertBefore(item, afterElement);
      }
      
      item.addEventListener("dragstart", (e: any) => {
        item.classList.add("is-dragging");
      });
      item.addEventListener("dragend", (e: any) => {
        item.classList.remove("is-dragging");
      });
      
  }
  
}, [])

  


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={`${styles.dropzone} dropzone target`}>
          
        </div>
        <div className={`${styles.sideBar} source`}>
          <div className="draggable" id="drag-1" draggable="true">drag-1</div>
          <div className="draggable" id="drag-2" draggable="true">drag-2</div>
          <div className="draggable" id="drag-3" draggable="true">drag-3</div>
          <div className="draggable" id="drag-4" draggable="true">drag-4</div>
          <div className="draggable" id="drag-5" draggable="true">drag-5</div>
        </div>
      </main>
    </>
  );
}
